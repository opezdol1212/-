import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

TOKEN = '7916253691:AAFkjEqHvieefx71eHfMnxB4xNIjVEfFHXA'
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª
RULES_TEXT = """üìò –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –í–µ–ª–∏–∫–æ–≥–æ –ì—ç—Ç—Å–±–∏

üîí –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è:
–°–ø–∞–º –ª—é–±–æ–≥–æ —Ä–æ–¥–∞ ‚Äî –±—É–¥—å —Ç–æ —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —ç–º–æ–¥–∑–∏ –±–µ–∑ —Å–º—ã—Å–ª–∞.

–ü–æ–ª–∏—Ç–∏–∫–∞, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏ –∏ —Ö–∞–º—Å—Ç–≤–æ ‚Äî —É –Ω–∞—Å –∑–¥–µ—Å—å —É—é—Ç, –∞ –Ω–µ —Ç–æ–∫-—à–æ—É.

–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—Å–∏–ª–∏—è, –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏.

–ú–∞—Ç–µ—Ä–∏–∞–ª—ã 18+, –≤–∫–ª—é—á–∞—è –∞–≤–∞—Ç–∞—Ä—ã –∏ —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî —á–∞—Ç—É –Ω–µ –Ω—É–∂–µ–Ω –≤–∑—Ä–æ—Å–ª—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.

–ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî –Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏–ª–∏ –∑–≤–∞—Ç—å –≤ –ª–∏—á–∫—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.

–†–µ–∫–ª–∞–º–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è ‚Äî –≤—Å–µ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ —Å @OrvarOd.

–°–±–æ—Ä —á—É–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –ø–µ—Ä–µ–¥–∞—á–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º ‚Äî —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.

–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞."""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
group_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü–†–ê–í–ò–õ–ê", url="https://t.me/rules2310_bot")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π "–ü–†–ê–í–ò–õ–ê"
user_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü–†–ê–í–ò–õ–ê", callback_data="show_rules")]
])

async def send_rules_reminder():
    while True:
        try:
            await bot.send_message(chat_id='-1002596135103', text="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö!",
                                   reply_markup=group_keyboard)
            logging.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await asyncio.sleep(1800)

@dp.callback_query(lambda c: c.data == "show_rules")
async def show_rules(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.send_message(chat_id=callback_query.from_user.id, text=RULES_TEXT)

@dp.message()
async def get_chat_id(message: types.Message):
    logging.info(f"Received message from {message.chat.id} of type {message.chat.type}: {message.text}")

    if message.chat.type in ['group', 'supergroup']:
        await message.reply("–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                            reply_markup=group_keyboard)
    else:
        await message.reply("–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=user_keyboard)

async def main():
    asyncio.create_task(send_rules_reminder())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
